"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

class Lemmatizer(object):
    """
    The Lemmatizer supports simple part-of-speech-sensitive suffix rules and
    lookup tables.

    DOCS: https://spacy.io/api/lemmatizer
    """

    @classmethod
    def load(cls, *args, **kwargs): ...
    def __init__(self, lookups, *args, **kwargs):
        """Initialize a Lemmatizer.

        lookups (Lookups): The lookups object containing the (optional) tables
            "lemma_rules", "lemma_index", "lemma_exc" and "lemma_lookup".
        RETURNS (Lemmatizer): The newly constructed object.
        """
        self.lookups = ...
    def __call__(self, string, univ_pos, morphology: Optional[Any] = ...):
        """Lemmatize a string.

        string (unicode): The string to lemmatize, e.g. the token text.
        univ_pos (unicode / int): The token's universal part-of-speech tag.
        morphology (dict): The token's morphological features following the
            Universal Dependencies scheme.
        RETURNS (list): The available lemmas for the string.
        """
        ...
    def is_base_form(self, univ_pos, morphology: Optional[Any] = ...):
        """
        Check whether we're dealing with an uninflected paradigm, so we can
        avoid lemmatization entirely.

        univ_pos (unicode / int): The token's universal part-of-speech tag.
        morphology (dict): The token's morphological features following the
            Universal Dependencies scheme.
        """
        ...
    def noun(self, string, morphology: Optional[Any] = ...): ...
    def verb(self, string, morphology: Optional[Any] = ...): ...
    def adj(self, string, morphology: Optional[Any] = ...): ...
    def det(self, string, morphology: Optional[Any] = ...): ...
    def pron(self, string, morphology: Optional[Any] = ...): ...
    def adp(self, string, morphology: Optional[Any] = ...): ...
    def num(self, string, morphology: Optional[Any] = ...): ...
    def punct(self, string, morphology: Optional[Any] = ...): ...
    def lookup(self, string, orth: Optional[Any] = ...):
        """Look up a lemma in the table, if available. If no lemma is found,
        the original string is returned.

        string (unicode): The original string.
        orth (int): Optional hash of the string to look up. If not set, the
            string will be used and hashed.
        RETURNS (unicode): The lemma if the string was found, otherwise the
            original string.
        """
        ...
    def lemmatize(self, string, index, exceptions, rules): ...
