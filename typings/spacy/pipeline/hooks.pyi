"""
This type stub file was generated by pyright.
"""

from .pipes import Pipe
from ..language import component
from typing import Any, Optional
@component("sentencizer_hook", assigns=["doc.user_hooks"])
class SentenceSegmenter(object):
    """A simple spaCy hook, to allow custom sentence boundary detection logic
    (that doesn't require the dependency parse). To change the sentence
    boundary detection strategy, pass a generator function `strategy` on
    initialization, or assign a new strategy to the .strategy attribute.
    Sentence detection strategies should be generators that take `Doc` objects
    and yield `Span` objects for each sentence.
    """

    def __init__(self, vocab, strategy: Optional[Any] = ...):
        self.vocab = ...
        self.strategy = ...
    def __call__(self, doc): ...
    @staticmethod
    def split_on_punct(doc): ...

@component("similarity", assigns=["doc.user_hooks"])
class SimilarityHook(Pipe):
    """
    Experimental: A pipeline component to install a hook for supervised
    similarity into `Doc` objects. Requires a `Tensorizer` to pre-process
    documents. The similarity model can be any object obeying the Thinc `Model`
    interface. By default, the model concatenates the elementwise mean and
    elementwise max of the two tensors, and compares them using the
    Cauchy-like similarity function from Chen (2013):

        >>> similarity = 1. / (1. + (W * (vec1-vec2)**2).sum())

    Where W is a vector of dimension weights, initialized to 1.
    """

    def __init__(self, vocab, model: bool = ..., **cfg):
        self.vocab = ...
        self.model = ...
        self.cfg = ...
    @classmethod
    def Model(cls, length): ...
    def __call__(self, doc):
        """Install similarity hook"""
        ...
    def pipe(self, docs, **kwargs): ...
    def predict(self, doc1, doc2): ...
    def begin_training(
        self, _=..., pipeline: Optional[Any] = ..., sgd: Optional[Any] = ..., **kwargs
    ):
        """Allocate model, using width from tensorizer in pipeline.

        gold_tuples (iterable): Gold-standard training data.
        pipeline (list): The pipeline the model is part of.
        """
        ...
