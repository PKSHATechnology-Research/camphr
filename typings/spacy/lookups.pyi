"""
This type stub file was generated by pyright.
"""

from collections import OrderedDict
from typing import Any, Optional

UNSET = object()

class Lookups(object):
    """Container for large lookup tables and dictionaries, e.g. lemmatization
    data or tokenizer exception lists. Lookups are available via vocab.lookups,
    so they can be accessed before the pipeline components are applied (e.g.
    in the tokenizer and lemmatizer), as well as within the pipeline components
    via doc.vocab.lookups.
    """

    def __init__(self):
        """Initialize the Lookups object.

        RETURNS (Lookups): The newly created object.

        DOCS: https://spacy.io/api/lookups#init
        """
        ...
    def __contains__(self, name):
        """Check if the lookups contain a table of a given name. Delegates to
        Lookups.has_table.

        name (unicode): Name of the table.
        RETURNS (bool): Whether a table of that name is in the lookups.
        """
        ...
    def __len__(self):
        """RETURNS (int): The number of tables in the lookups."""
        ...
    @property
    def tables(self):
        """RETURNS (list): Names of all tables in the lookups."""
        ...
    def add_table(self, name, data=...):
        """Add a new table to the lookups. Raises an error if the table exists.

        name (unicode): Unique name of table.
        data (dict): Optional data to add to the table.
        RETURNS (Table): The newly added table.

        DOCS: https://spacy.io/api/lookups#add_table
        """
        ...
    def get_table(self, name, default=...):
        """Get a table. Raises an error if the table doesn't exist and no
        default value is provided.

        name (unicode): Name of the table.
        default: Optional default value to return if table doesn't exist.
        RETURNS (Table): The table.

        DOCS: https://spacy.io/api/lookups#get_table
        """
        ...
    def remove_table(self, name):
        """Remove a table. Raises an error if the table doesn't exist.

        name (unicode): Name of the table to remove.
        RETURNS (Table): The removed table.

        DOCS: https://spacy.io/api/lookups#remove_table
        """
        ...
    def has_table(self, name):
        """Check if the lookups contain a table of a given name.

        name (unicode): Name of the table.
        RETURNS (bool): Whether a table of that name exists.

        DOCS: https://spacy.io/api/lookups#has_table
        """
        ...
    def to_bytes(self, **kwargs):
        """Serialize the lookups to a bytestring.

        RETURNS (bytes): The serialized Lookups.

        DOCS: https://spacy.io/api/lookups#to_bytes
        """
        ...
    def from_bytes(self, bytes_data, **kwargs):
        """Load the lookups from a bytestring.

        bytes_data (bytes): The data to load.
        RETURNS (Lookups): The loaded Lookups.

        DOCS: https://spacy.io/api/lookups#from_bytes
        """
        ...
    def to_disk(self, path, **kwargs):
        """Save the lookups to a directory as lookups.bin. Expects a path to a
        directory, which will be created if it doesn't exist.

        path (unicode / Path): The file path.

        DOCS: https://spacy.io/api/lookups#to_disk
        """
        ...
    def from_disk(self, path, **kwargs):
        """Load lookups from a directory containing a lookups.bin. Will skip
        loading if the file doesn't exist.

        path (unicode / Path): The directory path.
        RETURNS (Lookups): The loaded lookups.

        DOCS: https://spacy.io/api/lookups#from_disk
        """
        ...

class Table(OrderedDict):
    """A table in the lookups. Subclass of builtin dict that implements a
    slightly more consistent and unified API.

    Includes a Bloom filter to speed up missed lookups.
    """

    @classmethod
    def from_dict(cls, data, name: Optional[Any] = ...):
        """Initialize a new table from a dict.

        data (dict): The dictionary.
        name (unicode): Optional table name for reference.
        RETURNS (Table): The newly created object.

        DOCS: https://spacy.io/api/lookups#table.from_dict
        """
        ...
    def __init__(self, name: Optional[Any] = ..., data: Optional[Any] = ...):
        """Initialize a new table.

        name (unicode): Optional table name for reference.
        data (dict): Initial data, used to hint Bloom Filter.
        RETURNS (Table): The newly created object.

        DOCS: https://spacy.io/api/lookups#table.init
        """
        self.name = ...
        self.default_size = ...
        self.bloom = ...
    def __setitem__(self, key, value):
        """Set new key/value pair. String keys will be hashed.

        key (unicode / int): The key to set.
        value: The value to set.
        """
        ...
    def set(self, key, value):
        """Set new key/value pair. String keys will be hashed.
        Same as table[key] = value.

        key (unicode / int): The key to set.
        value: The value to set.
        """
        ...
    def __getitem__(self, key):
        """Get the value for a given key. String keys will be hashed.

        key (unicode / int): The key to get.
        RETURNS: The value.
        """
        ...
    def get(self, key, default: Optional[Any] = ...):
        """Get the value for a given key. String keys will be hashed.

        key (unicode / int): The key to get.
        default: The default value to return.
        RETURNS: The value.
        """
        ...
    def __contains__(self, key):
        """Check whether a key is in the table. String keys will be hashed.

        key (unicode / int): The key to check.
        RETURNS (bool): Whether the key is in the table.
        """
        ...
    def to_bytes(self):
        """Serialize table to a bytestring.

        RETURNS (bytes): The serialized table.

        DOCS: https://spacy.io/api/lookups#table.to_bytes
        """
        ...
    def from_bytes(self, bytes_data):
        """Load a table from a bytestring.

        bytes_data (bytes): The data to load.
        RETURNS (Table): The loaded table.

        DOCS: https://spacy.io/api/lookups#table.from_bytes
        """
        self.name = ...
        self.bloom = ...
