"""
This type stub file was generated by pyright.
"""

import plac
from pathlib import Path
from typing import Any, Optional

DEFAULT_OOV_PROB = -20
@plac.annotations(
    lang=("Model language", "positional", None, str),
    output_dir=("Model output directory", "positional", None, Path),
    freqs_loc=("Location of words frequencies file", "option", "f", Path),
    jsonl_loc=("Location of JSONL-formatted attributes file", "option", "j", Path),
    clusters_loc=("Optional location of brown clusters data", "option", "c", str),
    vectors_loc=("Optional vectors file in Word2Vec format", "option", "v", str),
    prune_vectors=("Optional number of vectors to prune to", "option", "V", int),
    vectors_name=(
        "Optional name for the word vectors, e.g. en_core_web_lg.vectors",
        "option",
        "vn",
        str,
    ),
    model_name=("Optional name for the model meta", "option", "mn", str),
)
def init_model(
    lang,
    output_dir,
    freqs_loc: Optional[Any] = ...,
    clusters_loc: Optional[Any] = ...,
    jsonl_loc: Optional[Any] = ...,
    vectors_loc: Optional[Any] = ...,
    prune_vectors=...,
    vectors_name: Optional[Any] = ...,
    model_name: Optional[Any] = ...,
):
    """
    Create a new model from raw data, like word frequencies, Brown clusters
    and word vectors. If vectors are provided in Word2Vec format, they can
    be either a .txt or zipped as a .zip or .tar.gz.
    """
    ...

def open_file(loc):
    """Handle .gz, .tar.gz or unzipped files"""
    ...

def read_attrs_from_deprecated(freqs_loc, clusters_loc): ...
def create_model(lang, lex_attrs, name: Optional[Any] = ...): ...
def add_vectors(nlp, vectors_loc, prune_vectors, name: Optional[Any] = ...): ...
def read_vectors(vectors_loc): ...
def read_freqs(freqs_loc, max_length=..., min_doc_freq=..., min_freq=...): ...
def read_clusters(clusters_loc): ...
