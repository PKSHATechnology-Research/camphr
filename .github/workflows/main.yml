name: test

on: 
  push:
    paths-ignore:
      - "docs/**"
  pull_request:
    paths-ignore:
      - "docs/**"

jobs:
  test:
    if: contains(github.event.head_commit.message, '[skip ci]') == false
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7]
        os: [ubuntu-latest, macos-latest]
        extras: [udify, elmo, none]
    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules
      shell: bash
      run: |
        git config --global url."https://github.com/".insteadOf "git@github.com:"
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      run: python -m pip install -U pip setuptools poetry
    - name: Cache Poetry virtualenv
      uses: actions/cache@v1
      id: cache
      with:
        path: ~/.virtualenvs
        key: poetry-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.extras }}-${{ hashFiles('poetry.lock') }}
    - name: Set Poetry config
      run: |
        poetry config virtualenvs.in-project false
        poetry config virtualenvs.path ~/.virtualenvs

    - name: Install dependencies
      run: poetry install
      if: steps.cache.outputs.cache-hit != true

    - name: Install udify
      run: |
        poetry run python scripts/download_model.py en_udify
        poetry install -E udify
      if: steps.cache.outputs.cache-hit != true && matrix.extras == 'udify'

    - name: Install elmo
      run: |
        poetry run python scripts/download_model.py en_elmo_medium
        poetry install -E allennlp
      if: steps.cache.outputs.cache-hit != true && matrix.extras == 'elmo'

    - run: poetry run mypy camphr
    - run: poetry run flake8
    - name: Run pytest
      run: poetry run pytest
      if:  matrix.extras == 'none'

    - name: Run pytest for extras
      run: poetry run pytest --runslow -rs -k ${{ matrix.extras }}
      if: matrix.extras != 'none'

  publish:
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
      needs: test
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          python-version: [3.7]
          os: [ubuntu-latest]
      steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install publishment tool
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Publish pypi package
        run: poetry publish -p '${{ secrets.PYPI_PASS }}' -u '${{ secrets.PYPI_USER }}' --build
